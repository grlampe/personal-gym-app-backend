// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String            @id @default(uuid())
  name              String
  email             String            @unique
  password          String
  cpf               String            @unique
  birthDate         DateTime          @db.Timestamptz()
  addressStreet     String            @map("address_street")
  addressNumber     String            @map("address_number")
  addressZipCode    String            @map("address_zip_code")
  addressDistrict   String            @map("address_district")
  addressCity       String            @map("address_city")
  addressState      String            @map("address_state")
  addressComplement String?           @map("address_complement")
  active            Boolean           @default(true)
  createdAt         DateTime          @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt         DateTime?         @default(now()) @map("updated_at") @db.Timestamptz()
  BodyMeasurement   BodyMeasurement[]
  ReceivingBills    ReceivingBills[]

  @@map("tb_user")
}

model CategoryExercise {
  id                         String                       @id @default(uuid())
  name                       String                       @unique
  active                     Boolean                      @default(true)
  createdAt                  DateTime                     @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt                  DateTime?                    @default(now()) @map("updated_at") @db.Timestamptz()
  ExerciseOnCategoryExercise ExerciseOnCategoryExercise[]

  @@map("tb_category_exercise")
}

model Exercise {
  id                         String                       @id @default(uuid())
  name                       String                       @unique
  active                     Boolean                      @default(true)
  createdAt                  DateTime                     @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt                  DateTime?                    @default(now()) @map("updated_at") @db.Timestamptz()
  ExerciseOnCategoryExercise ExerciseOnCategoryExercise[]

  @@map("tb_exercise")
}

model ExerciseOnCategoryExercise {
  id                 String           @id @default(uuid())
  exercise           Exercise         @relation(fields: [exerciseId], references: [id])
  exerciseId         String
  categoryExercise   CategoryExercise @relation(fields: [categoryExerciseId], references: [id])
  categoryExerciseId String
  createdAt          DateTime         @default(now()) @map("created_at") @db.Timestamptz()

  @@unique([exerciseId, categoryExerciseId])
  @@map("tb_exercise_category_exercise")
}

model BodyMeasurement {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  description String
  chestBust   Float
  leftArm     Float
  rightArm    Float
  abdomen     Float
  waist       Float
  hips        Float
  leftThigh   Float
  rightThigh  Float
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz()

  @@map("tb_body_measurement")
}

model ReceivingBills {
  id          String    @id @default(uuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  description String
  amount      Float
  paidAt      DateTime? @map("paid_at") @db.Timestamptz()
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz()
}
