// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                  @id @default(uuid())
  name                  String
  email                 String                  @unique
  password              String
  cpf                   String                  @unique
  birthDate             DateTime                @db.Timestamptz()
  addressStreet         String                  @map("address_street")
  addressNumber         String                  @map("address_number")
  addressZipCode        String                  @map("address_zip_code")
  addressDistrict       String                  @map("address_district")
  addressCity           String                  @map("address_city")
  addressState          String                  @map("address_state")
  addressComplement     String?                 @map("address_complement")
  active                Boolean                 @default(true)
  createdAt             DateTime                @default(now()) @map("created_at") @db.Timestamptz()
  BodyMeasurement       BodyMeasurement[]
  ReceivingBills        ReceivingBills[]
  Workout               Workout[]
  ExerciseWeightHistory ExerciseWeightHistory[]

  @@map("tb_user")
}

model CategoryExercise {
  id                         String                       @id @default(uuid())
  name                       String                       @unique
  active                     Boolean                      @default(true)
  createdAt                  DateTime                     @default(now()) @map("created_at") @db.Timestamptz()
  ExerciseOnCategoryExercise ExerciseOnCategoryExercise[]

  @@map("tb_category_exercise")
}

model Exercise {
  id                         String                       @id @default(uuid())
  name                       String                       @unique
  active                     Boolean                      @default(true)
  createdAt                  DateTime                     @default(now()) @map("created_at") @db.Timestamptz()
  ExerciseOnCategoryExercise ExerciseOnCategoryExercise[]
  PreWorkoutOnExercise       PreWorkoutOnExercise[]
  WorkoutOnExercise          WorkoutOnExercise[]
  ExerciseWeightHistory      ExerciseWeightHistory[]

  @@map("tb_exercise")
}

model ExerciseOnCategoryExercise {
  id                 String           @id @default(uuid())
  exercise           Exercise         @relation(fields: [exerciseId], references: [id])
  exerciseId         String
  categoryExercise   CategoryExercise @relation(fields: [categoryExerciseId], references: [id])
  categoryExerciseId String
  createdAt          DateTime         @default(now()) @map("created_at") @db.Timestamptz()

  @@unique([exerciseId, categoryExerciseId])
  @@map("tb_exercise_category_exercise")
}

model BodyMeasurement {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  workout     Workout? @relation(fields: [workoutId], references: [id])
  workoutId   String?
  description String
  height      Float
  weight      Float
  chestBust   Float
  leftArm     Float
  rightArm    Float
  abdomen     Float
  waist       Float
  hips        Float
  leftThigh   Float
  rightThigh  Float
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz()

  @@map("tb_body_measurement")
}

model ReceivingBills {
  id           String    @id @default(uuid())
  user         User      @relation(fields: [userId], references: [id])
  userId       String
  description  String
  amount       Float
  expirationAt DateTime  @map("expiration_at") @db.Timestamptz()
  paidAt       DateTime? @map("paid_at") @db.Timestamptz()
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz()

  @@map("tb_receiving_bills")
}

model PreWorkout {
  id                   String                 @id @default(uuid())
  description          String
  active               Boolean                @default(true)
  PreWorkoutOnExercise PreWorkoutOnExercise[]

  @@map("tb_pre-workout")
}

model PreWorkoutOnExercise {
  id           String     @id @default(uuid())
  preWorkout   PreWorkout @relation(fields: [preWorkoutId], references: [id])
  preWorkoutId String
  exercise     Exercise   @relation(fields: [exerciseId], references: [id])
  exerciseId   String
  order        Int
  restTime     String
  series       Int
  repetitions  String
  weight       Int
  observation  String?
  createdAt    DateTime   @default(now()) @map("created_at") @db.Timestamptz()

  @@map("tb_pre-workout_exercise")
}

model Workout {
  id                    String                  @id @default(uuid())
  user                  User                    @relation(fields: [userId], references: [id])
  userId                String
  description           String
  active                Boolean
  WorkoutOnCategory     WorkoutOnCategory[]
  BodyMeasurement       BodyMeasurement[]
  ExerciseWeightHistory ExerciseWeightHistory[]

  @@map("tb_workout")
}

model WorkoutOnCategory {
  id                String              @id @default(uuid())
  workout           Workout             @relation(fields: [workoutId], references: [id])
  workoutId         String
  description       String
  active            Boolean             @default(true)
  WorkoutOnExercise WorkoutOnExercise[]

  @@map("tb_workout_category")
}

model WorkoutOnExercise {
  id                  String            @id @default(uuid())
  WorkoutOnCategory   WorkoutOnCategory @relation(fields: [workoutOnCategoryId], references: [id])
  workoutOnCategoryId String
  exercise            Exercise          @relation(fields: [exerciseId], references: [id])
  exerciseId          String
  order               Int
  restTime            String
  series              Int
  repetitions         String
  weight              Int
  observation         String?
  createdAt           DateTime          @default(now()) @map("created_at") @db.Timestamptz()

  @@map("tb_workout_exercise")
}

model ExerciseWeightHistory {
  id         String   @id @default(uuid())
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  exerciseId String
  workout    Workout  @relation(fields: [workoutId], references: [id])
  workoutId  String
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  weight     Int
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz()

  @@map("tb_exercise_weight_history")
}
